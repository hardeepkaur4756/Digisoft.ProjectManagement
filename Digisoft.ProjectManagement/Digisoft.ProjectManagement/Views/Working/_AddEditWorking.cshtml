@model Digisoft.ProjectManagement.Models.WorkingViewModel

<div class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    @if (Model.ViewType == "Display")
    {
        <div class="form-group d-flex">
            <label class="control-label col-sm-4">Project Name</label>
            <div class="col-sm-8 text-break">
                
                @Html.DisplayFor(model => model.ProjectName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-4">Hours Worked</label>
            <div class="col-sm-8 text-break">
                @Html.DisplayFor(model => model.HoursWorked, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-4">Hours Billed</label>
            <div class="col-sm-8 text-break">
                @Html.DisplayFor(model => model.HoursBilled, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-4">Date Worked</label>
            <div class="col-sm-8 text-break">
                @Html.HiddenFor(model => model.DateWorked, new { htmlAttributes = new { @class = "form-control" } })
                <label class="control-label" id="dateWork"></label>
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-4">Description</label>
            <div class="col-sm-8 text-break">
                @Html.DisplayFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Close</a>
            </div>
        </div>
    }
    else
    {
        <div class="form-group d-flex">
            <label class="control-label col-sm-4">Project</label>
            @if (Model.Id != 0)
            {
        <div class="col-sm-8 text-break">
            @Html.HiddenFor(m => m.ProjectId)
            @Html.DisplayFor(model => model.ProjectName, new { htmlAttributes = new { @class = "form-control" } })
        </div>
            }
            else
            {
                <div class="col-sm-8 text-break">
                    @Html.DropDownListFor(x => Model.ProjectId, new SelectList(Model.Projects, "Value", "Text", ""), htmlAttributes: new { @class = "form-control", id = "ddlProject" })
                    @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
                </div>
            }
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-4">Hours Worked</label>
            <div class="col-sm-8 text-break">
                @Html.EditorFor(model => model.HoursWorked, new { htmlAttributes = new { @class = "form-control non-zero-num" , @autocomplete = "off" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-4">Hours Billed</label>
            <div class="col-sm-8 text-break">
                @Html.EditorFor(model => model.HoursBilled, new { htmlAttributes = new { @class = "form-control non-zero-num", @autocomplete = "off" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-4">Date Worked</label>
            <div class="col-sm-8 text-break">
                @Html.EditorFor(model => model.DateWorked, new { htmlAttributes = new { @class = "form-control", @id = "datew", @autocomplete = "off" } })
            </div>
        </div>
        <div class="form-group d-flex">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-sm-4" })
            <div class="col-sm-8 text-break">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>

        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Cancel</a>
                <input type="submit" value="Save" id="btnSave" class="btn btn-primary" />

            </div>
        </div>
    }
</div>
<script>
    $(document).ready(function () {
        debugger;
        var d = $("#datew").val();
        d = d?.split(' ')[0];
        $("#datew").val(d);
        var date = $("#DateWorked").val();
        date = date?.split(' ')[0];
        date = ConvertDateFormat(date);
        $("#dateWork").text(date);
        $("#datew").datepicker({
            autoclose: true,
            minViewMode: 0,
            //format: "dd/mm/yyyy"
            format: "yyyy-mm-dd",
            endDate: "today"
        })
        var id = $("#Id").val();
        if (id == undefined || id == "" || id == "0") {
            $("#HoursWorked").val('');
            $("#HoursBilled").val('');
        }

    })
    $("#btnSave").click(function () {
        debugger;
        var ProjectId = $("#ddlProject").val();
        var HoursWorked = $("#HoursWorked").val();
        var HoursBilled = $("#HoursBilled").val();
        var DateWorked = $("#datew").val();
        var Description = $("#Description").val();
        var vm = {};
        vm.Id = $("#Id").val();
        vm.ProjectId = ProjectId;
        vm.HoursWorked = HoursWorked;
        vm.HoursBilled = HoursBilled;
        vm.DateWorked = DateWorked;
        vm.Description = Description;
        var validate = true;
        if (vm.Id == "0" || vm.Id == undefined || vm.Id == "" || vm.Id == null) {
            if (ProjectId == undefined || ProjectId == "") {
                validate = false;
                $("#ddlProject").addClass("error");
            } else {
                $("#ddlProject").removeClass("error");
            }
        }
        else {
            vm.ProjectId = $("#ProjectId").val();
        }

        if (HoursBilled == undefined || HoursBilled == "") {
            validate = false;
            $("#HoursBilled").addClass("error");
        } else {
            $("#HoursBilled").removeClass("error");
        }
        if (HoursWorked == undefined || HoursWorked == "") {
            validate = false;
            $("#HoursWorked").addClass("error");
        } else {
            $("#HoursWorked").removeClass("error");
        }
        if (DateWorked == undefined || DateWorked == "") {
            validate = false;
            $("#datew").addClass("error");
        } else {
            $("#datew").removeClass("error");
        }
        if (Description == undefined || Description == "") {
            validate = false;
            $("#Description").addClass("error");
        } else {
            $("#Description").removeClass("error");
        }

        if (validate == true) {
            loader();
            $.ajax({
                type: "Post",
                url: "/Working/InsertUpdate",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify(vm),
                success: function (result) {
                    if (result.Success) {
                        $('#myModal').hide();
                        removeLoader();
                        notificationHelper.ShowSuccess(result.Message);
                        setTimeout(function () {
                            location.href = "/Working/Index";
                        }, 1000);
                        removeLoader();
                    } else {
                        removeLoader();
                        notificationHelper.ShowError("Sorry, An error occurred!");
                    }
                },
                failure: function (result) {
                    removeLoader();
                    notificationHelper.ShowError(result.responseText);
                }
            });
        }

    })
    function ConvertDateFormat(input) {
        debugger;
        const month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        var formattedDate = new Date(input);
        var d = formattedDate.getDate();
        var m = month[formattedDate.getMonth()];
        var y = formattedDate.getFullYear();
        var date = d + " " + m + " " + y;
        return date;
    }
</script>