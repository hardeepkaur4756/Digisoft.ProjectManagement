@model List<Digisoft.ProjectManagement.Models.WorkingViewModel>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h4 class="panel-title">
    Filters
</h4>
<div class="row">
    <div class="col-sm-3">
        <input type="text" class="form-control" id="startDate" autocomplete="off" placeholder="Select Start Date" />
    </div>
    <div class="col-sm-3">
        <input type="text" class="form-control" id="endDate" autocomplete="off" placeholder="Select End Date" />
    </div>
    <div class="col-sm-3">
        <select id="projectId" class="form-control">
            <option value="0">Select Project</option>
        </select>
    </div>
    <div class="col-sm-3">
        <select id="userId" class="form-control">
            <option value="">Select Employee</option>
        </select>
    </div>
</div>

<input type="button" id="" class="btn btn-primary common-btn" value="Clear" data-isNew="true" onclick="clearFilters(this)" />
<input type="button" id="btnAddProject" class="btn btn-primary common-btn" value="Add" data-isNew="true" onclick="AddOrEdit(this)" />
<label class="btn common-label">Total Hours Worked: </label><label class="btn common-value" id="hWorked">36</label>
<label class="btn common-label1">Total Hours Billed: </label><label class="btn common-value" id="hBilled">36</label>
<table class="table table-responsive table-hover" id="MyTable">
    <thead class="thead-dark">
        <tr>
            <th>Project</th>
            <th>Hours Worked</th>
            <th>Hours Billed</th>
            <th>Date Worked</th>
            <th>Description</th>
            <th>Created By</th>
            <th>Date</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
<style>
    .common-label {
        margin-bottom: -56px;
        margin-left: 200px;
        z-index: 1;
        position: relative;
        cursor: none;
        outline: none;
        font-weight: bold;
    }
    .common-label1 {
        margin-bottom: -56px;
        z-index: 1;
        position: relative;
        cursor: none;
        outline: none;
        font-weight: bold;
    }
    .common-value {
        margin-bottom: -56px;
        z-index: 1;
        position: relative;
        cursor: none;
        outline: none;
    }

    .common-label:not(:disabled):not(.disabled) {
        cursor: none;
    }
    .common-label1:not(:disabled):not(.disabled) {
        cursor: none;
    }
    .common-value:not(:disabled):not(.disabled) {
        cursor: none;
    }
</style>
<script>
    $(document).ready(function () {
        //date pickers
        var isFirstTime = true;
        var startDate = new Date(),
            sYear = startDate.getFullYear(),
            sMonth = startDate.getMonth() + 1,
            sDate = 1;
        var FromEndDate = new Date(),
            eYear = FromEndDate.getFullYear(),
            eMonth = FromEndDate.getMonth() + 2,
            eDate = 0;
        BindProject();
        BindUser();
        $('#endDate').datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd"
        }).datepicker('setDate', eYear + '-' + eMonth + '-' + eDate);
        $("#startDate").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd"
        }).datepicker('setDate', sYear + '-' + sMonth + '-' + sDate).on('changeDate', function (selected) {
            startDate = new Date(selected.date.valueOf());
            startDate.setDate(startDate.getDate(new Date(selected.date.valueOf())));
            $('#endDate').datepicker('setStartDate', startDate);
            var edate = $('#endDate').val()
            if (edate == undefined || edate == "") {
                $("#endDate").addClass("error");
                $("#endDate").val("");
                return false;
            } else {
                $("#endDate").removeClass("error");
                _loadData();
                isFirstTime = false;
            }
        });

        $("#endDate").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd"
        }).on('changeDate', function (selected) {
            var sdate = $('#startDate').val()
            if (sdate == undefined || sdate == "") {
                $("#startDate").addClass("error");
                $("#endDate").val("");
                return false;
            } else {
                $("#endDate").removeClass("error");
                $("#startDate").removeClass("error");
                FromEndDate = new Date(selected.date.valueOf());
                FromEndDate.setDate(FromEndDate.getDate(new Date(selected.date.valueOf())));
                $('#startDate').datepicker('setEndDate', FromEndDate);
                _loadData();
                isFirstTime = false;
            }
        });
        $("#projectId").change(function () {
            _loadData();
        })
        $("#userId").change(function () {
            _loadData();
        })
        loader();
        if (isFirstTime) {
            _loadData();
        }
        removeLoader();
    });
    var oTable;
    var _loadData = function (response) {
        if ($.fn.DataTable.isDataTable("#MyTable")) {
            oTable.draw();
        }
        else {
            oTable =
                $('#MyTable').DataTable({
                    "bServerSide": true,
                    "sAjaxSource": "/Working/GetList",
                    "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                        var colName = oSettings.aoColumns[oSettings.aaSorting[0][0]].mData;
                        var sDir = oSettings.aaSorting[0][1];
                        var sDate = $("#startDate").val();
                        var eDate = $("#endDate").val();
                        var project = $("#projectId").val();
                        var user = $("#userId").val();
                        aoData.push({ "name": "sortCol", "value": colName });
                        aoData.push({ "name": "sortDir", "value": sDir });
                        aoData.push({ "name": "startDate", "value": sDate });
                        aoData.push({ "name": "endDate", "value": eDate });
                        aoData.push({ "name": "projectId", "value": project });
                        aoData.push({ "name": "userId", "value": user });
                        $.ajax({
                            type: "Get",
                            data: aoData,
                            url: sSource,
                            success: fnCallback,
                            dataFilter: function (response) {
                                var temp = JSON.parse(response);
                                $("#hWorked").text(temp.totalHoursWorked);
                                $("#hBilled").text(temp.totalHoursBilled);
                                return response;
                            }
                        })
                    },
                    "aoColumns": [
                        { "mData": "ProjectName" },
                        { "mData": "HoursWorked" },
                        { "mData": "HoursBilled" },
                        {
                            "mData": "DateWorked",
                            "render": function (row, type, full) {
                                const month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
                                var date = new Date(parseInt(full.DateWorked.substr(6)));
                                var monthName = month[date.getMonth()];
                                var formattedDate = date.getDate() + " " + monthName + " " + date.getFullYear();
                                return formattedDate;
                            }
                        },
                        { "mData": "Description" },
                        { "mData": "CreatedByName" },
                        {
                            "mData": "CreatedDate",
                            "render": function (row, type, full) {
                                const month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
                                var date = new Date(parseInt(full.CreatedDate.substr(6)));
                                var monthName = month[date.getMonth()];
                                var formattedDate = date.getDate() + " " + monthName + " " + date.getFullYear();
                                return formattedDate;
                            }
                        },
                        {
                            "mData": null,
                            "render": function (row, type, full) {
                                var buttons;
                                if (full.IsAdmin) {
                                    buttons = "<a class='icon-style' href='#' id='' data-id='" + full.Id + "' onclick='return ViewDetail(this)'><i class='fa fa-info-circle' aria-hidden='true'></i></a>";
                                    return "<a class='icon-style' href='#' id='' data-id='" + full.Id + "' onclick='return AddOrEdit(this)'> <i class='fa fa-pencil' aria-hidden='true'></i></a><a class='icon-style' href='#' id='' data-id='" + full.Id + "' onclick='return Delete(this)'><i class='fa fa-trash' aria-hidden='true'></i></a>" + buttons;
                                }
                                else {
                                    buttons = "<a class='icon-style' href='#' id='' data-id='" + full.Id + "' onclick='return ViewDetail(this)'><i class='fa fa-info-circle' aria-hidden='true'></i></a>";
                                    if (full.IsCurrentUser) {
                                        if (full.IsUnderDeleteTime) {
                                            return "<a class='icon-style' href='#' id='' data-id='" + full.Id + "' onclick='return AddOrEdit(this)'> <i class='fa fa-pencil' aria-hidden='true'></i></a><a class='icon-style' href='#' id='' data-id='" + full.Id + "' onclick='return Delete(this)'><i class='fa fa-trash' aria-hidden='true'></i></a>" + buttons;
                                        }
                                    } else {
                                        return buttons;
                                    }
                                }
                                return buttons;
                            },
                        },
                    ],
                    "aoColumnDefs": [
                        { "bSortable": false, "aTargets": [4] }
                    ],
                    "order": [[3, "desc"]],
                    bProcessing: true,
                    pageLength: 10,
                    "paging": true,
                    bSearching: false,
                    bLengthChange: false,
                    "language": {
                        "zeroRecords": "Not found - Sorry",
                        "info": "Page _PAGE_ of _PAGES_",
                        "infoEmpty": "No records",
                        "processing": "Processing... Please wait",
                    },
                });
        }
        removeLoader();
    };

    var clearFilters = function () {
        var startDate = new Date(),
            sYear = startDate.getFullYear(),
            sMonth = startDate.getMonth() + 1,
            sDate = 1;
        var FromEndDate = new Date(),
            eYear = FromEndDate.getFullYear(),
            eMonth = FromEndDate.getMonth() + 2,
            eDate = 0;
        $('#endDate').datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "dd-mm-yyyy"
        }).datepicker('setDate', eYear + '-' + eMonth + '-' + eDate);
        $("#startDate").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "dd-mm-yyyy"
        }).datepicker('setDate', sYear + '-' + sMonth + '-' + sDate)
        $("#projectId").val("0");
        $("#userId").val("");
        _loadData();
    }

    var AddOrEdit = function (event) {
        var isNew = event.getAttribute("data-isNew");
        var Id = parseInt(event.getAttribute("data-Id"));
        if (Id == null || Id == undefined) {
            notificationHelper.ShowError("Some thing went wrong!");
        }
        else {
            if (isNew) {
                Id = 0;
            }
            loader();
            $.ajax({
                type: "Get",
                url: "/Working/AddWorking",
                data: { id: Id },
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.Success) {
                        if (Id > 0) {
                            $('#myModal').find('#myModalLabel').html('Update Working');
                        }
                        else {
                            $('#myModal').find('#myModalLabel').html('Add Working');
                        }

                        $('#myModal').find('.modal-body').html(response.Html);
                        $('#myModal').find('.btn-primary').addClass('saveBid');
                        $('#myModal').modal('show');
                        removeLoader();
                    }
                    else {
                        notificationHelper.ShowError("Some thing went wrong !");
                        removeLoader();
                    }
                },
                error: function (result) {
                    notificationHelper.ShowError(result.Message);
                    removeLoader();
                }
            });
        }
    }
    var ViewDetail = function (event) {
        var Id = parseInt(event.getAttribute("data-Id"));
        if (Id == null || Id == undefined) {
            notificationHelper.ShowError("Some thing went wrong!");
        }
        else {
            loader();
            $.ajax({
                type: "Get",
                url: "/Working/AddWorking",
                data: { id: Id, "viewType": "Display" },
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.Success) {
                        if (Id > 0) {
                            $('#myModal').find('#myModalLabel').html('Working View Detail');
                        }
                        else {
                            $('#myModal').find('#myModalLabel').html('Working View Detail');
                        }

                        $('#myModal').find('.modal-body').html(response.Html);
                        $('#myModal').find('.btn-primary').addClass('saveBid');
                        $('#myModal').modal('show');
                        removeLoader();
                    }
                    else {
                        notificationHelper.ShowError("Some thing went wrong !");
                        removeLoader();
                    }
                },
                error: function (result) {
                    notificationHelper.ShowError(result.Message);
                    removeLoader();
                }
            });
        }
    }
    function Delete(event) {
        var Id = parseInt(event.getAttribute("data-Id"));
        if (Id == null || Id == undefined) {
            notificationHelper.ShowError("Some thing went wrong!");
        }
        else {
            if (confirm("Are you sure?")) {
                loader();
                $.ajax({
                    type: "Get",
                    url: "/Working/Delete",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    data: { Id: Id },
                    success: function (result) {
                        if (result.Success) {
                            notificationHelper.ShowSuccess(result.Message);
                            setTimeout(function () {
                                location.href = "/Working/Index";
                            }, 1000);
                            removeLoader();
                        }
                        else {
                            notificationHelper.ShowError(result.Message);
                            removeLoader();
                        }
                    },
                    error: function (result) {
                        notificationHelper.ShowError('Error');
                        removeLoader();
                    }
                });
            }
            else {
                return false;
            }
        }
    }
    function BindProject() {
        $.ajax({
            type: "Get",
            url: "/Working/GetProject",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (result) {
                var project = $("#projectId");
                if (result.length > 0) {
                    $.each(result, function () {
                        project.append($("<option></option>").val(this['Value']).html(this['Text']));
                    });

                }
            },
            error: function (result) {
                notificationHelper.ShowError('Error');
                removeLoader();
            }
        });
    }
    function BindUser() {
        $.ajax({
            type: "Get",
            url: "/Working/GetUser",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (result) {
                var user = $("#userId");
                if (result.length > 0) {
                    $.each(result, function () {
                        user.append($("<option></option>").val(this['Value']).html(this['Text']));
                    });
                }
            },
            error: function (result) {
                notificationHelper.ShowError('Error');
                removeLoader();
            }
        });
    }
</script>

