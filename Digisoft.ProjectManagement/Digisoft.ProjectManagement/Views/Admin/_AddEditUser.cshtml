@model Digisoft.ProjectManagement.Models.UserViewModel

<div class="form-horizontal">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.UserId)

    @if (Model.ViewType == "Display")
    {
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">First Name</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.FirstName, new { @class = "form-control", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.FirstName, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-sm-2">Last Name</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.LastName, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Role</label>
            <div class="col-sm-4 text-break">
                @Html.DropDownListFor(modal => modal.RoleId, new SelectList(Model.Users, "Value", "Text", ""), "--Select--", htmlAttributes: new { @class = "form-control chosen", @id = "ddlRoles" })
            </div>
            @if (Model.UserId == null)
            {
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-sm-2" })
                <div class="col-sm-4 text-break">
                    @Html.TextBoxFor(modal => modal.Email, new { @class = "form-control", @type = "email", @onchange = "return validateEmail('Email');", @autocomplete = "off" })
                </div>
            }
            else
            {
                if (User.IsInRole("Admin") || User.IsInRole("Operational Manager"))
                {
                    <label class="control-label col-sm-2">Active</label>
                    <div class="col-sm-4 text-break">

                        @Html.CheckBoxFor(model => model.Exclude, new { htmlAttributes = new { @class = "form-control" } })

                    </div>
                }
            }
        </div>
        if (Model.UserId == null)
        {
            <div class="form-group d-flex">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-sm-2" })
                <div class="col-sm-4 text-break">
                    @Html.TextBoxFor(modal => modal.Password, new { @class = "form-control", @type = "password", @onchange = "return CheckPassword();", @autocomplete = "new-password" })
                </div>
                <label class="control-label col-sm-2">Confirm Password</label>
                <div class="col-sm-4 text-break">
                    @Html.TextBoxFor(modal => modal.ConfirmPassword, new { @class = "form-control", @type = "password", @onchange = "return validateConfirmPassword();", @autocomplete = "off" })
                </div>
            </div>
        }
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Father Name</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.FatherName, new { @class = "form-control", @autocomplete = "off" })
            </div>
            <label class="control-label col-sm-2">Mother Name</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.MotherName, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Marital Status</label>
            <div class="col-sm-4 text-break">
                <input type="hidden" id="status" value="@Model.MarritalStatus" />
                <select class="form-control" id="MarritalStatus">
                    <option value="">-Select-</option>
                    <option value="Married">Married</option>
                    <option value="Unmarried">Unmarried</option>
                </select>
            </div>
            <label class="control-label col-sm-2">Spouse Name</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.SpouseName, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Anniversary Date</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.AnniversaryDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @autocomplete = "off" })
            </div>
            <label class="control-label col-sm-2">Celebrated DOB</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.DOB, "{0:yyyy-MM-dd}", new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Documented DOB</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.DocumentDOB, "{0:yyyy-MM-dd}", new { @class = "form-control", @autocomplete = "off" })
            </div>
            <label class="control-label col-sm-2">Blood Group</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.BloodGroup, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Department</label>
            <div class="col-sm-4 text-break">
                @Html.DropDownListFor(modal => modal.DepartmentId, new SelectList(Model.Departments, "Value", "Text", ""), "--Select--", htmlAttributes: new { @class = "form-control chosen", @id = "ddlDepartments" })
            </div>
            <label class="control-label col-sm-2">Skills</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.Skills, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Date of Joining</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.DateofJoining, "{0:yyyy-MM-dd}", new { @class = "form-control non-time-date", @autocomplete = "off" })
            </div>
            <label class="control-label col-sm-2">Date of Releiving</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.DateofRelieving, "{0:yyyy-MM-dd}", new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Vaccination Date(1st Dose)</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.Vaccination1stDoseDate, "{0:yyyy-MM-dd}", new { @class = "form-control non-time-date", @autocomplete = "off" })
            </div>
            <label class="control-label col-sm-2">Vaccination Date(2nd Dose)</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.Vaccination2ndDoseDate, "{0:yyyy-MM-dd}", new { @class = "form-control non-time-date", @autocomplete = "off" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Phone Number</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.PhoneNumber, new { @class = "form-control", @onchange = "return validateNo('PhoneNumber');", @maxlength = "10", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.PhoneNumber, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-sm-2">Alternate Phone Number</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.AlternatePhoneNumber, new { @class = "form-control", @onchange = "return validateNo('AlternatePhoneNumber');", @maxlength = "10", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.AlternatePhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Personal Email Address</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.PersonalEmailAddress, new { @class = "form-control", @onchange = "return validateEmail('PersonalEmailAddress');", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.PersonalEmailAddress, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-sm-2">Emergency Contact Name</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.EmergencyContactName, new { @class = "form-control", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.EmergencyContactName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Emergency Contact Relation</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.EmergencyContactRelation, new { @class = "form-control", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.EmergencyContactRelation, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-sm-2">Emergency Contact Number</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.EmergencyContactNumber, new { @class = "form-control", @onchange = "return validateNo('EmergencyContactNumber');", @maxlength = "10", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.EmergencyContactNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Aadhar Number</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.AadharNumber, new { @class = "form-control", @onchange = "return validateNo('AadharNumber');", @maxlength = "12", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.AadharNumber, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-sm-2">Pan Number</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.PanNumber, new { @class = "form-control", @onchange = "return validatePan();", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.PanNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Current Address</label>
            <div class="col-sm-4 text-break">
                @Html.TextAreaFor(modal => modal.CurrentAddress, new { @class = "form-control", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.CurrentAddress, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-sm-2">Current City</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.CurrentCity, new { @class = "form-control", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.CurrentCity, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Current State</label>
            <div class="col-sm-4 text-break">
                @Html.DropDownListFor(modal => modal.CurrentStateId, new SelectList(Model.States, "Value", "Text", ""), "--Select--", htmlAttributes: new { @class = "form-control chosen", @id = "ddlCState" })
                @Html.ValidationMessageFor(modal => modal.CurrentStateId, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-sm-2">Current Country</label>
            <div class="col-sm-4 text-break">
                @Html.DropDownListFor(modal => modal.CurrentCountryId, new SelectList(Model.Countries, "Value", "Text", ""), "--Select--", htmlAttributes: new { @class = "form-control chosen", @id = "ddlCCountry" })
                @Html.ValidationMessageFor(modal => modal.CurrentCountryId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Permanent Address</label>
            <div class="col-sm-4 text-break">
                @Html.TextAreaFor(modal => modal.PermanentAddress, new { @class = "form-control", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.PermanentAddress, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-sm-2">Permanent City</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.PermanentCity, new { @class = "form-control", @autocomplete = "off" })
                @Html.ValidationMessageFor(modal => modal.PermanentCity, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Permanent State</label>
            <div class="col-sm-4 text-break">
                @Html.DropDownListFor(modal => modal.PermanentStateId, new SelectList(Model.States, "Value", "Text", ""), "--Select--", htmlAttributes: new { @class = "form-control chosen", @id = "ddlPState" })
                @Html.ValidationMessageFor(modal => modal.PermanentStateId, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-sm-2">Permanent Country</label>
            <div class="col-sm-4 text-break">
                @Html.DropDownListFor(modal => modal.PermanentCountryId, new SelectList(Model.Countries, "Value", "Text", ""), "--Select--", htmlAttributes: new { @class = "form-control chosen", @id = "ddlPCountry" })
                @Html.ValidationMessageFor(modal => modal.PermanentCountryId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Previous Salary</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.PreviousSalary, new { @class = "form-control", @onchange = "return IsNumberOrDecimal('PreviousSalary');", @autocomplete = "off" })
            </div>
            <label class="control-label col-sm-2">Increment</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.Increment, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Salary</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.Salary, new { @class = "form-control", @onchange = "return IsNumberOrDecimal('Salary');", @autocomplete = "off" })
            </div>
            <label class="control-label col-sm-2">Experience When Joined</label>
            <div class="col-sm-4 text-break">
                @Html.TextBoxFor(modal => modal.ExpWhenJoined, new { @class = "form-control", @autocomplete = "off" })
            </div>

        </div>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Close</a>
                <input type="submit" value="Save" id="btnSave" class="btn btn-primary" />
            </div>
        </div>
    }
    else if (Model.ViewType == "ChangePassword")
    {
        <div class="form-group d-flex">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-sm-3" })
            <div class="col-sm-9">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @onchange = "return CheckPassword();", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Confirm Password</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", @onchange = "return validateConfirmPassword();", @autocomplete = "off" } })
            </div>
        </div>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Cancel</a>
                <input type="submit" value="Change Password" id="btnChangePassword" class="btn btn-primary" />

            </div>
        </div>
    }
    else if (Model.ViewType == "UploadDocument")
    {
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Type</label>
            <div class="col-sm-9">
                <select class="form-control" id="ddlType">
                    <option value="">Select</option>
                    <option value="PAN Card">PAN Card</option>
                    <option value="Aadhar Card">Aadhar Card</option>
                    <option value="Photo">Photo</option>
                    <option value="Experience Letter">Experience Letter</option>
                    <option value="Releiving Letter">Releiving Letter</option>
                    <option value="Offer Letter">Offer Letter</option>
                    <option value="Joining Letter">Joining Letter</option>
                    <option value="Covid-Vaccination Certificate">Covid-Vaccination Certificate</option>
                    <option value="CV">CV</option>
                    <option value="10th">10th</option>
                    <option value="12th">12th</option>
                    <option value="Graduate">Graduate</option>
                    <option value="Post Graduate">Post Graduate</option>
                    <option value="Other">Other</option>
                </select>
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Upload File</label>
            <div class="col-sm-9">
                <input type="file" id="FileName" multiple />
            </div>
        </div>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Cancel</a>
                <input type="submit" value="Upload" id="btnUpload" class="btn btn-primary" />

            </div>
        </div>
    }
    else if (Model.ViewType == "ViewDocument")
    {
        <input type="button" id="btnAddDocument" class="btn btn-primary common-btn1" value="Add" data-isNew="false" onclick="AddDocument(this,'@Model.UserId')" />
        <table class="table table-responsive table-hover" id="MyTable">
            <thead class="thead-dark">
                <tr>
                    <th>Type</th>
                    <th>Image</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null)
                {
                    if (Model.Documents != null)
                    {
                        foreach (var item in Model.Documents)
                        {
                            <tr>
                                <td>@item.Type</td>
                                @if (item.Name.ToLower().Contains(".jpg") || item.Name.ToLower().Contains(".png") || item.Name.ToLower().Contains(".jpeg"))
                                {
                                    <td><img src="@item.Name" height="50" width="50"></td>
                                }
                                else if (item.Name.ToLower().Contains(".pdf"))
                                {
                                    <td>
                                        <embed src='@item.Name' height="50" width="50" sandbox="allow-same-origin allow-scripts allow-popups allow-forms" />
                                    </td>
                                }
                                else
                                {
                                    <td>
                                        <iframe src='https://view.officeapps.live.com/op/embed.aspx?src=@item.Name&embedded=true' height="50" width="50" sandbox="allow-same-origin allow-scripts allow-popups allow-forms" />
                                    </td>
                                }
                                <td>
                                    <a class='icon-style' href='javascript:void(0)' onclick="DeleteDocument(this,'@item.Id')"><i class='fa fa-trash-o' aria-hidden='true'></i></a>
                                    <a class='icon-style' href='@item.Name' download>
                                        <i class='fa fa-download' aria-hidden='true'></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    }
    else if (Model.ViewType == "AddEducation")
    {
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Course</label>
            <div class="col-sm-9">
                @Html.DropDownListFor(modal => modal.CourseId, new SelectList(Model.Courses, "Value", "Text", ""), "--Select--", htmlAttributes: new { @class = "form-control chosen", @id = "ddlCourse" })
            </div>
        </div>
        <div class="form-group" id="divCourseIn" style="display:none">
            <label class="control-label col-sm-3">In</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.CourseIn, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Percentage</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.Percentage, new { htmlAttributes = new { @class = "form-control", @onchange = "return IsNumberOrDecimal('Percentage')", @autocomplete = "off" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Year Passed</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.YearPassed, new { htmlAttributes = new { @class = "form-control", @maxlength = "4", @onchange = "return IsNumber()", @autocomplete = "off" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Comment</label>
            <div class="col-sm-9">
                @Html.TextAreaFor(model => model.Comment, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Cancel</a>
                <input type="submit" value="Save" id="btnSaveEducation" class="btn btn-primary" />
            </div>
        </div>
    }
    else if (Model.ViewType == "EditEducation")
    {
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Course</label>
            <div class="col-sm-9">
                @Html.HiddenFor(model => model.Id)
                @Html.DropDownListFor(modal => modal.CourseId, new SelectList(Model.Courses, "Value", "Text", ""), "--Select--", htmlAttributes: new { @class = "form-control chosen", @id = "ddlCourse" })
            </div>
        </div>
        if (Model.CourseId == 3 || Model.CourseId == 4)
        {
            <div class="form-group d-flex" id="divCourseIn">
                <label class="control-label col-sm-3">In</label>
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.CourseIn, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                </div>
            </div>
        }
        else
        {
            <div class="form-group" id="divCourseIn" style="display:none">
                <label class="control-label col-sm-3">In</label>
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.CourseIn, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                </div>
            </div>
        }
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Percentage</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.Percentage, new { htmlAttributes = new { @class = "form-control", @onchange = "return IsNumberOrDecimal('Percentage')", @autocomplete = "off" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Year Passed</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.YearPassed, new { htmlAttributes = new { @class = "form-control", @maxlength = "4", @onchange = "return IsNumber()", @autocomplete = "off" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Comment</label>
            <div class="col-sm-9">
                @Html.TextAreaFor(model => model.Comment, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Cancel</a>
                <input type="submit" value="Update" id="btnSaveEducation" class="btn btn-primary" />
            </div>
        </div>
    }
    else if (Model.ViewType == "AddIncrement")
    {
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Date Of Increment</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.DateOfIncrement, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Salary</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control", @onchange = "return IsNumberOrDecimal('Salary');", @autocomplete = "off" } })
            </div>
        </div>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Cancel</a>
                <input type="submit" value="Save" id="btnSaveIncrement" class="btn btn-primary" />
            </div>
        </div>
    }
    else if (Model.ViewType == "EditIncrement")
    {
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Date of Increment</label>
            <div class="col-sm-9">
                @Html.HiddenFor(model => model.Id)
                @Html.EditorFor(model => model.DateOfIncrement, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-3">Salary</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control", @onchange = "return IsNumberOrDecimal('Salary');", @autocomplete = "off" } })
            </div>
        </div>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Cancel</a>
                <input type="submit" value="Update" id="btnSaveIncrement" class="btn btn-primary" />
            </div>
        </div>
    }

    else if (Model.ViewType == "ViewEducation")
    {
        <input type="button" id="btnAddDocument" class="btn btn-primary common-btn1" value="Add" data-isNew="false" onclick="AddEducation(this,'@Model.UserId')" />
        <table class="table table-responsive table-hover" id="MyTable">
            <thead class="thead-dark">
                <tr>
                    <th>Course</th>
                    <th>Percentage</th>
                    <th>Year Passed</th>
                    <th>Document Uploaded</th>
                    <th>Comment</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null)
                {
                    if (Model.Educations != null)
                    {
                        foreach (var item in Model.Educations)
                        {
                            <tr>
                                @if (item.CourseName == "Graduate" || item.CourseName == "Post Graduate")
                                {
                                    <td>@item.CourseName in @item.CourseIn</td>
                                }
                                else
                                {
                                    <td>@item.CourseName</td>
                                }
                                <td>@item.Percentage</td>
                                <td>@item.YearPassed</td>
                                @if (item.IsDocumentUploaded == true)
                                {
                                    <td><i class="fa fa-check" aria-hidden="true" style="color:green;font-size:14px"></i></td>
                                }
                                else
                                {
                                    <td></td>
                                }
                                <td>@item.Comment</td>
                                <td>
                                    <a class='icon-style' href='javascript:void(0)' onclick="EditEducation(this,'@item.Id')"><i class='fa fa-pencil' aria-hidden='true'></i></a>
                                    <a class='icon-style' href='javascript:void(0)' onclick="DeleteEducation(this,'@item.Id')"><i class='fa fa-trash-o' aria-hidden='true'></i></a>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Close</a>
            </div>
        </div>

    }
    else if (Model.ViewType == "ViewIncrement")
    {
        <input type="button" id="btnAddIncrement" class="btn btn-primary common-btn1" value="Add" data-isNew="false" onclick="AddIncrement(this,'@Model.UserId')" />
        <table class="table table-responsive table-hover" id="MyTable">
            <thead class="thead-dark">
                <tr>
                    <th>Date of Increment</th>
                    <th>Previous Salary</th>
                    <th>Current Salary</th>
                    <th>Percentage</th>
                    <th>Amount</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null)
                {
                    if (Model.Increments != null)
                    {
                        for (int i = Model.Increments.Count - 1; i >= 0; --i)
                        {
                            var date = Model.Increments[i].DateOfIncrement;
                            <tr>
                                <td>@Model.Increments[i].DateOfIncrement</td>
                                <td>@Model.Increments[i].PreviousSalary</td>
                                <td>@Model.Increments[i].CurrentSalary</td>
                                <td>@Model.Increments[i].Percentage</td>
                                <td>@Model.Increments[i].Amount</td>
                                <td>
                                    <a class='icon-style' href='javascript:void(0)' onclick="EditIncrement(this,'@Model.Increments[i].Id')"><i class='fa fa-pencil' aria-hidden='true'></i></a>
                                    <a class='icon-style' href='javascript:void(0)' onclick="DeleteIncrement(this,'@Model.Increments[i].Id')"><i class='fa fa-trash-o' aria-hidden='true'></i></a>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Close</a>
            </div>
        </div>

    }
    else
    {
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">First Name</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.FirstName, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Last Name</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.LastName, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">

            <label class="control-label col-sm-2">Role</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.RoleName, new { @class = "form-control" })
            </div>
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-sm-2" })
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.Email, new { @class = "form-control" })
            </div>

        </div>
        <div class="form-group d-flex">

            <label class="control-label col-sm-2">Father Name</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.FatherName, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Mother Name</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.MotherName, new { @class = "form-control" })
            </div>

        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Marrital Status</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.MarritalStatus, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Spouse Name</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.SpouseName, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Anniversary Date</label>
            <div class="col-sm-4 text-break">
                <label class="control-label">@Model.DateOfAnniversary</label>
            </div>
            <label class="control-label col-sm-2">Celebrated DOB</label>
            <div class="col-sm-4 text-break">
                <label class="control-label">@Model.CelebratedDateOfBirth</label>
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Documented DOB</label>
            <div class="col-sm-4 text-break">
                <label class="control-label">@Model.DocumentedDateOfBirth</label>
            </div>
            <label class="control-label col-sm-2">Blood Group</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.BloodGroup, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Department</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(model => model.DepartmentName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <label class="control-label col-sm-2">Skills</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.Skills, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Date of Joining</label>
            <div class="col-sm-4 text-break">
                <label class="control-label">@Model.JoiningDate</label>
            </div>
            <label class="control-label col-sm-2">Date of Releiving</label>
            <div class="col-sm-4 text-break">
                <label class="control-label">@Model.RelievingDate</label>
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Vaccination Date(1st Dose)</label>
            <div class="col-sm-4 text-break">
                <label class="control-label">@Model.Vaccination1stDate</label>
            </div>
            <label class="control-label col-sm-2">Vaccination Date(2nd Dose)</label>
            <div class="col-sm-4 text-break">
                <label class="control-label">@Model.Vaccination2ndDate</label>
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Phone Number</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.PhoneNumber, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Alternate Phone Number</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.AlternatePhoneNumber, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Personal Email Address</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.PersonalEmailAddress, new { @class = "form-control", @onchange = "return validateEmail('PersonalEmailAddress');" })
            </div>
            <label class="control-label col-sm-2">Emergency Contact Name</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.EmergencyContactName, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Emergency Contact Relation</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.EmergencyContactRelation, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Emergency Contact Number</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.EmergencyContactNumber, new { @class = "form-control", @maxlength = "10" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Aadhar Number</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.AadharNumber, new { @class = "form-control", @maxlength = "12" })
            </div>
            <label class="control-label col-sm-2">Pan Number</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.PanNumber, new { @class = "form-control", @onchange = "return validatePan();" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Current City</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.CurrentCity, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Current State</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.CurrentStateName, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Current Country</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.CurrentCountryName, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Current Address</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.CurrentAddress, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Permanent City</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.PermanentCity, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Permanent State</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.PermanentStateName, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Permanent Country</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.PermanentCountryName, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Permanent Address</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.PermanentAddress, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Previous Salary</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.PreviousSalary, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Increment</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.Increment, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Salary</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.Salary, new { @class = "form-control" })
            </div>
            <label class="control-label col-sm-2">Experience When Joined</label>
            <div class="col-sm-4 text-break">
                @Html.DisplayFor(modal => modal.ExpWhenJoined, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group d-flex">
            <label class="control-label col-sm-2">Active</label>
            <div class="col-sm-4 text-break">
                @if (Model.Exclude == true)
                {
                    <label class="control-label">Yes</label>
                }
                else
                {
                    <label class="control-label">No</label>
                }
            </div>
        </div>
        <div class="text-right mt-2">
            <div class="">
                <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Close</a>
            </div>
        </div>
    }
</div>
<style>
    .divdoc {
        width: 50%;
        margin: 0 auto;
    }

    .divedu {
        width: 60%;
        margin: 0 auto;
    }

    .common-btn1 {
        z-index: 1;
        position: relative;
    }
</style>
<script>
    $(document).ready(function () {
        $("#DOB").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd",
            endDate: "today"
        })
        $("#DocumentDOB").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd",
            endDate: "today"
        })
        $("#AnniversaryDate").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd"
        })
        $("#DateofJoining").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd"
        })
        $("#DateofRelieving").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd"
        })
        $("#Vaccination1stDoseDate").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd"
        })
        $("#Vaccination2ndDoseDate").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd"
        })
        $("#DateOfIncrement").datepicker({
            autoclose: true,
            minViewMode: 0,
            format: "yyyy-mm-dd"
        })
        var status = $("#status").val();
        $("#MarritalStatus").val(status);
    });
    $("#btnSave").click(function () {
        var first = $("#FirstName").val();
        var last = $("#LastName").val();
        var Id = $("#UserId").val();
        var password = $("#Password").val();
        var cpass = $("#ConfirmPassword").val();
        var emailAdress = $("#Email").val();
        var roleId = $("#ddlRoles").val();
        var dateOfJoining = $("#DateofJoining").val();
        var fatherName = $("#FatherName").val();
        var motherName = $("#MotherName").val();
        var marritalStatus = $("#MarritalStatus :selected").val();
        var spouseName = $("#SpouseName").val();
        var anniversaryDate = $("#AnniversaryDate").val();
        var bloodGroup = $("#BloodGroup").val();
        var v1stdose = $("#Vaccination1stDoseDate").val();
        var v2nddose = $("#Vaccination2ndDoseDate").val();
        var personalEmailAddress = $("#PersonalEmailAddress").val();
        var dateofRelieving = $("#DateofRelieving").val();
        var dob = $("#DOB").val();
        var dDob = $("#DocumentDOB").val();
        var departmentId = $("#ddlDepartments").val();
        var aadharNumber = $("#AadharNumber").val();
        var panNumber = $("#PanNumber").val();
        var currentCity = $("#CurrentCity").val();
        var currentStateId = $("#ddlCState").val();
        var currentCountryId = $("#ddlCCountry").val();
        var currentAddress = $("#CurrentAddress").val();
        var permanentCity = $("#PermanentCity").val();
        var permanentStateId = $("#ddlPState").val();
        var permanentCountryId = $("#ddlPCountry").val();
        var permanentAddress = $("#PermanentAddress").val();
        var phoneNumber = $("#PhoneNumber").val();
        var alternatePhoneNumber = $("#AlternatePhoneNumber").val();
        var exp = $("#ExpWhenJoined").val();
        var salary = $("#Salary").val();
        var pSalary = $("#PreviousSalary").val();
        var increment = $("#Increment").val();
        var skills = $("#Skills").val();
        var emergencyContactName = $("#EmergencyContactName").val();
        var emergencyContactRelation = $("#EmergencyContactRelation").val();
        var emergencyContactNumber = $("#EmergencyContactNumber").val();
        var exclude = false;
        if ($("#Exclude").is(":checked")) {
            exclude = true;
        }
        else {
            exclude = false;
        }
        var vm = {};
        vm.FirstName = first;
        vm.LastName = last;
        vm.Email = emailAdress;
        vm.Password = password;
        vm.Exclude = exclude;
        vm.RoleId = $("#ddlRoles :selected").text();
        vm.FatherName = fatherName;
        vm.MotherName = motherName;
        vm.MarritalStatus = marritalStatus;
        vm.SpouseName = spouseName;
        vm.AnniversaryDate = anniversaryDate;
        vm.BloodGroup = bloodGroup;
        vm.Vaccination1stDoseDate = v1stdose;
        vm.Vaccination2ndDoseDate = v2nddose;
        vm.PhoneNumber = phoneNumber;
        vm.AlternatePhoneNumber = alternatePhoneNumber;
        vm.AadharNumber = aadharNumber;
        vm.PanNumber = panNumber;
        vm.EmergencyContactName = emergencyContactName;
        vm.EmergencyContactNumber = emergencyContactNumber;
        vm.EmergencyContactRelation = emergencyContactRelation;
        vm.PermanentCity = permanentCity;
        vm.PersonalEmailAddress = personalEmailAddress;
        vm.PermanentStateId = $("#ddlPState :selected").val();
        vm.PermanentCountryId = $("#ddlPCountry :selected").val();
        vm.PermanentAddress = permanentAddress;
        vm.CurrentCity = currentCity;
        vm.CurrentStateId = $("#ddlCState :selected").val();
        vm.CurrentCountryId = $("#ddlCCountry :selected").val();
        vm.CurrentAddress = currentAddress;
        vm.Salary = salary;
        vm.Skills = skills;
        vm.ExpWhenJoined = exp;
        vm.DateofJoining = dateOfJoining;
        vm.DateofRelieving = dateofRelieving;
        vm.DOB = dob;
        vm.DocumentDOB = dDob;
        vm.DepartmentId = $("#ddlDepartments :selected").val();
        vm.PreviousSalary = pSalary;
        vm.Increment = increment;
        var validate = true;
        if (first == undefined || first == "") {
            validate = false;
            $("#FirstName").addClass("error");
        } else {
            $("#FirstName").removeClass("error");
        }
        if (departmentId == undefined || departmentId == "") {
            validate = false;
            $("#ddlDepartments").addClass("error");
        } else {
            $("#ddlDepartments").removeClass("error");
        }
        if (permanentStateId == undefined || permanentStateId == "") {
            validate = false;
            $("#ddlPState").addClass("error");
        } else {
            $("#ddlPState").removeClass("error");
        }
        if (permanentCountryId == undefined || permanentCountryId == "") {
            validate = false;
            $("#ddlPCountry").addClass("error");
        } else {
            $("#ddlPCountry").removeClass("error");
        }
        if (permanentAddress == undefined || permanentAddress == "") {
            validate = false;
            $("#PermanentAddress").addClass("error");
        } else {
            $("#PermanentAddress").removeClass("error");
        }
        if (currentStateId == undefined || currentStateId == "") {
            validate = false;
            $("#ddlCState").addClass("error");
        } else {
            $("#ddlCState").removeClass("error");
        }
        if (currentCountryId == undefined || currentCountryId == "") {
            validate = false;
            $("#ddlCCountry").addClass("error");
        } else {
            $("#ddlCCountry").removeClass("error");
        }
        if (currentAddress == undefined || currentAddress == "") {
            validate = false;
            $("#CurrentAddress").addClass("error");
        } else {
            $("#CurrentAddress").removeClass("error");
        }
        if (dob == undefined || dob == "") {
            validate = false;
            $("#DOB").addClass("error");
        } else {
            $("#DOB").removeClass("error");
        }
        if (dDob == undefined || dDob == "") {
            validate = false;
            $("#DocumentDOB").addClass("error");
        } else {
            $("#DocumentDOB").removeClass("error");
        }
        if (aadharNumber == undefined || aadharNumber == "") {
            validate = false;
            $("#AadharNumber").addClass("error");
        } else {
            $("#AadharNumber").removeClass("error");
        }
        if (panNumber == undefined || panNumber == "") {
            validate = false;
            $("#PanNumber").addClass("error");
        } else {
            $("#PanNumber").removeClass("error");
        }
        if (phoneNumber == undefined || phoneNumber == "") {
            validate = false;
            $("#PhoneNumber").addClass("error");
        } else {
            $("#PhoneNumber").removeClass("error");
        }
        if (emergencyContactName == undefined || emergencyContactName == "") {
            validate = false;
            $("#EmergencyContactName").addClass("error");
        } else {
            $("#EmergencyContactName").removeClass("error");
        }
        if (emergencyContactRelation == undefined || emergencyContactRelation == "") {
            validate = false;
            $("#EmergencyContactRelation").addClass("error");
        } else {
            $("#EmergencyContactRelation").removeClass("error");
        }
        if (emergencyContactNumber == undefined || emergencyContactNumber == "") {
            validate = false;
            $("#EmergencyContactNumber").addClass("error");
        } else {
            $("#EmergencyContactNumber").removeClass("error");
        }
        if (dateOfJoining == undefined || dateOfJoining == "") {
            validate = false;
            $("#DateofJoining").addClass("error");
        } else {
            $("#DateofJoining").removeClass("error");
        }
        if (salary == undefined || salary == "") {
            validate = false;
            $("#Salary").addClass("error");
        } else {
            $("#Salary").removeClass("error");
        }
        if (Id != null && Id != "") {
            vm.UserId = Id;
        }
        else {
            if (roleId == undefined || roleId == "") {
                validate = false;
                $("#ddlRoles").addClass("error");
            } else {
                $("#ddlRoles").removeClass("error");
            }
            if (password == undefined || password == "") {
                validate = false;
                $("#Password").addClass("error");
            } else {
                $("#Password").removeClass("error");
            }
            if (cpass == undefined || cpass == "") {
                validate = false;
                $("#ConfirmPassword").addClass("error");
            } else {
                $("#ConfirmPassword").removeClass("error");
            }
            if (emailAdress == undefined || emailAdress == "") {
                validate = false;
                $("#Email").addClass("error");
            } else {
                $("#Email").removeClass("error");
            }
        }
        if (validate == true) {
            loader();
            $.ajax({
                type: "Post",
                url: "/Admin/AddUser",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify(vm),
                success: function (result) {
                    if (result.Success == true) {
                        $('#myModal').hide();
                        removeLoader();
                        notificationHelper.ShowSuccess(result.Message);
                        setTimeout(function () {
                            location.href = "/Admin/Index";
                        }, 1000);
                        removeLoader();
                    }
                    else if (result.Success == false) {
                        removeLoader();
                        notificationHelper.ShowError(result.Message);

                    }
                    else {
                        removeLoader();
                        notificationHelper.ShowError("Sorry, An error occurred!");
                    }
                },
                error: function (result) {
                    removeLoader();
                    notificationHelper.ShowError("Error");
                }
            });
        }
    })
    function validateEmail(name) {
        var email = $("#" + name + "").val();
        var emailReg = /^([\w-\.]+@@([\w-]+\.)+[\w-]{2,4})?$/;
        if (!emailReg.test(email)) {
            $("#" + name + "").val('');
            $("#" + name + "").addClass("error");
            notificationHelper.ShowError("Invalid Email");
            return false;
        } else {
            $("#" + name + "").removeClass("error");
            return true;
        }
    }
    function validateNo(name) {
        var mobileNum = $("#" + name + "").val();
        var validateMobNum = /^\d*(?:\.\d{1,2})?$/;
        if (validateMobNum.test(mobileNum)) {
            $("#" + name + "").removeClass("error");
            return true;
        }
        else {
            notificationHelper.ShowError("Invalid Number");
            $("#" + name + "").addClass("error");
            $("#" + name + "").val('');
            return false;
        }
    }
    function IsNumberOrDecimal(name) {
        var salary = $("#" + name + "").val();
        var RE = /^-{0,1}\d*\.{0,1}\d+$/;
        if (RE.test(salary)) {
            $("#" + name + "").removeClass("error");
            return true;
        }
        else {
            $("#" + name + "").val('');
            $("#" + name + "").addClass("error");
            notificationHelper.ShowError("Invalid");
            return false;
        }
    }
    function IsNumber() {
        var value = $('#YearPassed').val();
        var regex = new RegExp(/^\+?[0-9(),.-]+$/);
        if (value.match(regex)) {
            var date = new Date().getFullYear();
            if (parseInt(value) > parseInt(date)) {
                $('#YearPassed').addClass("error");
                notificationHelper.ShowError("Year can't be in the future");
                $('#YearPassed').val("");
                return false;
            }
            else {
                $('#YearPassed').removeClass("error");
                return true;
            }
        }
        else {
            $('#YearPassed').addClass("error");
            notificationHelper.ShowError("Invalid year");
            $('#YearPassed').val("");
            return false;
        }
    }
    function validatePan() {
        var inputvalues = $("#PanNumber").val();
        var regex = /[A-Z]{5}[0-9]{4}[A-Z]{1}$/;
        if (!regex.test(inputvalues)) {
            $("#PanNumber").val("");
            $("#PanNumber").addClass("error");
            notificationHelper.ShowError("Invalid format");
            return false;
        }
        else {
            $("#PanNumber").removeClass("error");
            return true;
        }
    }
    function validateConfirmPassword() {
        var password = $("#Password").val();
        var cpass = $("#ConfirmPassword").val();
        if (cpass != password) {
            validate = false;
            $("#ConfirmPassword").addClass("error");
            $("#Password").addClass("error");
            $("#Password").val('');
            $("#ConfirmPassword").val('');
            notificationHelper.ShowError("Password and Confirm Password should be same.");
        } else {
            $("#ConfirmPassword").removeClass("error");
            $("#Password").removeClass("error");
        }
    }
    function CheckPassword() {
        var inputtxt = $("#Password").val();
        if (inputtxt.length >= 6) {
            $("#Password").removeClass("error");
            return true;
        }
        else {
            $("#Password").val('');
            $("#Password").addClass("error");
            notificationHelper.ShowError("Password should be at least 6 characters.");
            return false;
        }
    }
    $("#btnChangePassword").click(function () {
        var id = $("#UserId").val();
        var password = $("#Password").val();
        var cpass = $("#ConfirmPassword").val();
        var vm = {};
        vm.Password = password;
        var validate = true;
        if (password == undefined || password == "") {
            validate = false;
            $("#Password").addClass("error");
        } else {
            $("#Password").removeClass("error");
        }
        if (cpass == undefined || cpass == "") {
            validate = false;
            $("#ConfirmPassword").addClass("error");
        } else {
            $("#ConfirmPassword").removeClass("error");
        }
        if (id != null && id != "") {
            vm.UserId = id;
        }
        if (validate == true) {
            loader();
            $.ajax({
                type: "Post",
                url: "/Admin/ChangePasswordAsync",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify(vm),
                success: function (result) {
                    if (result.Success == true) {
                        $('#myModal').hide();
                        notificationHelper.ShowSuccess(result.Message);
                        setTimeout(function () {
                            location.href = "/Admin/Index";
                        }, 1000);
                        removeLoader();
                    }
                    else if (result.Success == false) {
                        removeLoader();
                        notificationHelper.ShowError(result.Message);

                    }
                    else {
                        removeLoader();
                        notificationHelper.ShowError("Sorry, An error occurred!");
                    }
                },
                error: function (result) {
                    removeLoader();
                    notificationHelper.ShowError("Error");
                }
            });
        }
    })
    $("#btnUpload").click(function () {
        var id = $("#UserId").val();
        var type = $("#ddlType :selected").val();
        var fileInput = document.getElementById('FileName');
        var validate = true;
        var filePath = fileInput.value;
        var allowedExtensions =
            /(\.jpg|\.jpeg|\.png|\.gif|\.pdf|\.docx|\.doc|\.docm)$/i;
        var vm = new FormData();
        vm.append("UserId", id);
        vm.append("Type", type);
        if (fileInput.files.length > 0) {
            for (i = 0; i < fileInput.files.length; i++) {
                if (!allowedExtensions.exec(fileInput.files[i].name)) {
                    validate = false;
                    notificationHelper.ShowError('File should be Image(png, jpg, jpeg, gif), PDF or DOC format');
                    fileInput.value = '';
                }
                else {
                    vm.append("file", fileInput.files[i]);
                }
            }
        }
        else {
            validate = false;
            notificationHelper.ShowError('Please choose any file');
        }
        if (type == undefined || type == "") {
            validate = false;
            $("#ddlType").addClass("error");
        } else {
            $("#ddlType").removeClass("error");
        }
        if (validate == true) {
            loader();
            $.ajax({
                type: "Post",
                url: "/Admin/UploadDocument",
                enctype: 'multipart/form-data',
                dataType: 'json',
                contentType: false,
                processData: false,
                cache: false,
                data: vm,
                success: function (result) {
                    if (result.Success == true) {
                        notificationHelper.ShowSuccess(result.Message);
                        removeLoader();
                        ViewDocument(id);
                    }
                    else if (result.Success == false) {
                        removeLoader();
                        notificationHelper.ShowError(result.Message);

                    }
                    else {
                        removeLoader();
                        notificationHelper.ShowError("Sorry, An error occurred!");
                    }
                },
                error: function (result) {
                    removeLoader();
                    notificationHelper.ShowError(result.responseText);
                }
            });
        }
    })
    var AddDocument = function (event, Id) {
        var id = Id;
        var viewType = "UploadDocument";
        loader();
        $.ajax({
            type: "Get",
            url: "/Admin/AddUser",
            data: { id: id, viewType: viewType },
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response.Success) {
                    if (Id != null && Id != "") {
                        $('#myModal').find('#myModalLabel').html("Upload " + response.UserName + "'s Document");
                    }
                    $('#myModal').find('.modal-body').html(response.Html);
                    $('#myModal').find('.btn-primary').addClass('saveBid');
                    $('#myModal').modal('show');
                    $('#myModal').find('.modal-content').addClass('divdoc');
                    removeLoader();
                }
                else {
                    notificationHelper.ShowError("Some thing went wrong !");
                    removeLoader();
                }
            },
            error: function (result) {
                notificationHelper.ShowError(result.Message);
                removeLoader();
            }
        });
    }
    function DeleteDocument(event, Id) {
        var UserId = $("#UserId").val();
        if (confirm("Are you sure?")) {
            loader();
            $.ajax({
                type: "Get",
                url: "/Admin/DeleteDocument",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: { Id: Id },
                success: function (result) {
                    if (result.Success) {
                        notificationHelper.ShowSuccess(result.Message);
                        removeLoader();
                        if (UserId != null && UserId != undefined) {
                            ViewDocument(UserId);
                        }
                    }
                    else {
                        notificationHelper.ShowError(result.Message);
                        removeLoader();
                    }
                },
                error: function (result) {
                    notificationHelper.ShowError('Error');
                    removeLoader();
                }
            });
        }
        else {
            return false;
        }
    }
    function DeleteEducation(event, Id) {
        var UserId = $("#UserId").val();
        if (confirm("Are you sure?")) {
            loader();
            $.ajax({
                type: "Get",
                url: "/Admin/DeleteEducation",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: { Id: Id },
                success: function (result) {
                    if (result.Success) {
                        notificationHelper.ShowSuccess(result.Message);
                        removeLoader();
                        if (UserId != null && UserId != undefined) {
                            ViewEducation(UserId);
                        }
                    }
                    else {
                        notificationHelper.ShowError(result.Message);
                        removeLoader();
                    }
                },
                error: function (result) {
                    notificationHelper.ShowError('Error');
                    removeLoader();
                }
            });
        }
        else {
            return false;
        }
    }
    var AddEducation = function (event, Id) {
        var id = Id;
        var viewType = "AddEducation";
        loader();
        $.ajax({
            type: "Get",
            url: "/Admin/AddUser",
            data: { id: id, viewType: viewType },
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response.Success) {
                    if (Id != null && Id != "") {
                        $('#myModal').find('#myModalLabel').html("Add " + response.UserName + "'s education");
                    }
                    $('#myModal').find('.modal-body').html(response.Html);
                    $('#myModal').find('.btn-primary').addClass('saveBid');
                    $('#myModal').modal('show');
                    $('#myModal').find('.modal-content').addClass('divdoc');
                    removeLoader();
                }
                else {
                    notificationHelper.ShowError("Some thing went wrong !");
                    removeLoader();
                }
            },
            error: function (result) {
                notificationHelper.ShowError(result.Message);

                removeLoader();
            }
        });
    }
    var EditEducation = function (event, Id) {
        var id = Id;
        var viewType = "EditEducation";
        loader();
        $.ajax({
            type: "Get",
            url: "/Admin/AddUser",
            data: { id: id, viewType: viewType },
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response.Success) {
                    if (Id != null && Id != "") {
                        $('#myModal').find('#myModalLabel').html("Edit " + response.UserName + "'s education");
                    }
                    $('#myModal').find('.modal-body').html(response.Html);
                    $('#myModal').find('.btn-primary').addClass('saveBid');
                    $('#myModal').modal('show');
                    $('#myModal').find('.modal-content').addClass('divdoc');
                    removeLoader();
                }
                else {
                    notificationHelper.ShowError("Some thing went wrong !");
                    removeLoader();
                }
            },
            error: function (result) {
                notificationHelper.ShowError(result.Message);

                removeLoader();
            }
        });
    }
    var AddIncrement = function (event, Id) {
        var id = Id;
        var viewType = "AddIncrement";
        loader();
        $.ajax({
            type: "Get",
            url: "/Admin/AddUser",
            data: { id: id, viewType: viewType },
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response.Success) {
                    if (Id != null && Id != "") {
                        $('#myModal').find('#myModalLabel').html("Add " + response.UserName + "'s increment");
                    }
                    $('#myModal').find('.modal-body').html(response.Html);
                    $('#myModal').find('.btn-primary').addClass('saveBid');
                    $('#myModal').modal('show');
                    $('#myModal').find('.modal-content').addClass('divdoc');
                    removeLoader();
                }
                else {
                    notificationHelper.ShowError("Some thing went wrong !");
                    removeLoader();
                }
            },
            error: function (result) {
                notificationHelper.ShowError(result.Message);

                removeLoader();
            }
        });
    }
    var EditIncrement = function (event, Id) {
        var id = Id;
        var viewType = "EditIncrement";
        loader();
        $.ajax({
            type: "Get",
            url: "/Admin/AddUser",
            data: { id: id, viewType: viewType },
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response.Success) {
                    if (Id != null && Id != "") {
                        $('#myModal').find('#myModalLabel').html("Edit " + response.UserName + "'s increment");
                    }
                    $('#myModal').find('.modal-body').html(response.Html);
                    $('#myModal').find('.btn-primary').addClass('saveBid');
                    $('#myModal').modal('show');
                    $('#myModal').find('.modal-content').addClass('divdoc');
                    removeLoader();
                }
                else {
                    notificationHelper.ShowError("Some thing went wrong !");
                    removeLoader();
                }
            },
            error: function (result) {
                notificationHelper.ShowError(result.Message);

                removeLoader();
            }
        });
    }
    function DeleteIncrement(event, Id) {
        var UserId = $("#UserId").val();
        if (confirm("Are you sure?")) {
            loader();
            $.ajax({
                type: "Get",
                url: "/Admin/DeleteIncrement",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: { Id: Id },
                success: function (result) {
                    if (result.Success) {
                        notificationHelper.ShowSuccess(result.Message);
                        removeLoader();
                        if (UserId != null && UserId != undefined) {
                            ViewIncrement(UserId);
                        }
                    }
                    else {
                        notificationHelper.ShowError(result.Message);
                        removeLoader();
                    }
                },
                error: function (result) {
                    notificationHelper.ShowError('Error');
                    removeLoader();
                }
            });
        }
        else {
            return false;
        }
    }
    $("#btnSaveEducation").click(function () {
        var userId = $("#UserId").val();
        var id = $("#Id").val();
        var courseId = $("#ddlCourse :selected").val();
        var courseIn = $("#CourseIn").val();
        var percentage = $("#Percentage").val();
        var yearPassed = $("#YearPassed").val();
        var comment = $("#Comment").val();
        var validate = true;
        var vm = {};
        vm.Id = id;
        vm.UserId = userId;
        vm.CourseId = courseId;
        vm.CourseIn = courseIn;
        vm.Percentage = percentage;
        vm.YearPassed = yearPassed;
        vm.Comment = comment;
        if (courseId == undefined || courseId == "") {
            validate = false;
            $("#ddlCourse").addClass("error");
        } else {
            $("#ddlCourse").removeClass("error");
        }
        if (courseId == 3 || courseId == 4) {
            if (courseIn == undefined || courseIn == "") {
                validate = false;
                $("#CourseIn").addClass("error");
            }
            else {
                $("#CourseIn").removeClass("error");
            }
        } else {
            $("#CourseIn").removeClass("error");
        }
        if (percentage == undefined || percentage == "") {
            validate = false;
            $("#Percentage").addClass("error");
        } else {
            $("#Percentage").removeClass("error");
        }
        if (yearPassed == undefined || yearPassed == "") {
            validate = false;
            $("#YearPassed").addClass("error");
        } else {
            $("#YearPassed").removeClass("error");
        }
        if (validate == true) {
            loader();
            $.ajax({
                type: "Post",
                url: "/Admin/SaveEducation",
                dataType: 'json',
                contentType: "application/json",
                data: JSON.stringify(vm),
                success: function (result) {
                    if (result.Success == true) {
                        notificationHelper.ShowSuccess(result.Message);
                        removeLoader();
                        ViewEducation(userId);
                    }
                    else if (result.Success == false) {
                        removeLoader();
                        notificationHelper.ShowError(result.Message);
                    }
                    else {
                        removeLoader();
                        notificationHelper.ShowError("Sorry, An error occurred!");
                    }
                },
                error: function (result) {
                    removeLoader();
                    notificationHelper.ShowError("Error");
                }
            });
        }
    })
    $("#btnSaveIncrement").click(function () {
        var userId = $("#UserId").val();
        var id = $("#Id").val();
        var dateOfIncrement = $("#DateOfIncrement").val();
        var salary = $("#Salary").val();
        var validate = true;
        var vm = {};
        vm.Id = id;
        vm.UserId = userId;
        vm.DateOfIncrement = dateOfIncrement;
        vm.Salary = salary;
        if (dateOfIncrement == undefined || dateOfIncrement == "") {
            validate = false;
            $("#DateOfIncrement").addClass("error");
        } else {
            $("#DateOfIncrement").removeClass("error");
        }
        if (salary == undefined || salary == "") {
            validate = false;
            $("#Salary").addClass("error");
        } else {
            $("#Salary").removeClass("error");
        }
        if (validate == true) {
            loader();
            $.ajax({
                type: "Post",
                url: "/Admin/SaveIncrement",
                dataType: 'json',
                contentType: "application/json",
                data: JSON.stringify(vm),
                success: function (result) {
                    if (result.Success == true) {
                        notificationHelper.ShowSuccess(result.Message);
                        removeLoader();
                        ViewIncrement(userId);
                    }
                    else if (result.Success == false) {
                        removeLoader();
                        notificationHelper.ShowError(result.Message);
                    }
                    else {
                        removeLoader();
                        notificationHelper.ShowError("Sorry, An error occurred!");
                    }
                },
                failure: function (result) {
                    removeLoader();
                    notificationHelper.ShowError("Error");
                }
            });
        }
    })
    function ConvertDateFormat(input) {
        debugger;
        const month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        input = input.split("/").reverse().join("-");
        var formattedDate = new Date(input);
        var d = formattedDate.getDate();
        var m = month[formattedDate.getMonth()];
        var y = formattedDate.getFullYear();
        var date = d + " " + m + " " + y;
        return date;
    }
    $("#ddlCourse").change(function () {
        debugger;
        var course = $("#ddlCourse :selected").text();
        if (course == "Graduate" || course == "Post Graduate") {
            $("#divCourseIn").removeAttr("style");
            $("#divCourseIn").addClass("d-flex");
        }
    })
</script>
